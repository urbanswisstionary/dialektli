generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL") // uses connection pooling
    directUrl = env("DATABASE_URL_NON_POOLING") // uses a direct connection
}

generator pothos {
    provider     = "prisma-pothos-types"
    clientOutput = "@prisma/client"
    output       = "../generated/pothos-types.ts"
}

model Like {
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    String
    author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId  String
    createdAt DateTime @default(now())

    @@unique([postId, authorId])
    @@index([postId, authorId])
}

model Dislike {
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    String
    author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId  String
    createdAt DateTime @default(now())

    @@unique([postId, authorId])
    @@index([postId, authorId])
}

model Post {
    id        String    @id @default(cuid())
    title     String
    content   String?
    examples  String[]
    published Boolean   @default(false)
    author    User?     @relation(fields: [authorId], references: [id])
    authorId  String?
    likes     Like[]
    dislikes  Dislike[]
}

model Account {
    id                 String  @id @default(cuid())
    userId             String  @map("user_id")
    type               String
    provider           String
    providerAccountId  String  @map("provider_account_id")
    refresh_token      String?
    access_token       String?
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String?
    session_state      String?
    oauth_token_secret String?
    oauth_token        String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
    USER
    ADMIN
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    emailVerified DateTime?
    password      String?
    image         String?
    bio           String?
    posts         Post[]
    accounts      Account[]
    sessions      Session[]
    role          Role      @default(USER)
    likes         Like[]
    dislikes      Dislike[]

    country String?
    canton  String?
}

model VerificationToken {
    id         Int      @id @default(autoincrement())
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
