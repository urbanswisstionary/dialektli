input CreateTermInput {
  cantons: [String!]
  content: String
  examples: [String!]
  language: Language
  title: String!
}

input CreateUserInput {
  bio: String
  canton: String
  country: String
  email: String!
  image: String
  name: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Dislike {
  author: User!
  authorId: ID!
  createdAt: DateTime!
  term: Term!
  termId: ID!
}

type Flag {
  author: User!
  authorId: ID!
  createdAt: DateTime!
  term: Term!
  termId: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json

enum Language {
  DE
  FR
  IT
}

type Like {
  author: User!
  authorId: ID!
  createdAt: DateTime!
  term: Term!
  termId: ID!
}

type Mutation {
  changeUserRole(role: Role!, userId: String!): User
  createTerm(data: CreateTermInput!): Term
  createUser(data: CreateUserInput!): User
  deleteTerm(data: TermIdInput!): Term
  deleteUser(data: UserIdInput!): User
  termAction(data: TermActionInput!): Boolean!
  updateTerm(data: UpdateTermInput!): Term
  updateUser(data: UpdateUserInput!): User
}

type Query {
  adminTerms: TermsWithCount
  adminUser(data: UserIdInput!): User!
  adminUsers: UsersWithCount
  me: User!
  term(data: TermIdInput!): Term
  termsQuery(data: TermsQueryInput!): TermsWithCount
  verifyUserNameIsUnique(name: String!): Boolean!
}

enum Role {
  ADMIN
  USER
}

type Term {
  author: User!
  cantons: [String!]!
  content: String
  createdAt: DateTime!
  dislikedByMe: Boolean!
  dislikes: [Dislike!]!
  dislikesCount: Int!
  examples: [String!]!
  flagged: [Flag!]!
  flaggedByMe: Boolean!
  id: ID!
  language: Language!
  likedByMe: Boolean!
  likes: [Like!]!
  likesCount: Int!
  published: Boolean!
  title: String!
  updatedAt: DateTime
}

input TermActionInput {
  dislike: Boolean
  flag: Boolean
  like: Boolean
  termId: String!
}

input TermIdInput {
  termId: String!
}

input TermsQueryInput {
  authorName: String
  canton: String
  firstChar: String
  language: Language
  limit: Int
  offset: Int
  q: String
  slug: String
}

type TermsWithCount {
  count: Int!
  terms: [Term!]!
}

input UpdateTermInput {
  cantons: [String!]
  content: String
  examples: [String!]
  id: String!
  published: Boolean
  title: String
}

input UpdateUserInput {
  bio: String
  canton: String
  country: String
  id: String!
  image: String
  name: String
}

type User {
  bio: String
  canton: String
  country: String
  dislikes: [Dislike!]!
  dislikesCount: Int!
  email: String!
  emailVerified: DateTime
  flags: [Flag!]!
  id: ID!
  image: String
  likes: [Like!]!
  likesCount: Int!
  myPublishedTermsCount: Int!
  myUnpublishedTermsCount: Int!
  name: String!
  role: Role!
  terms: [Term!]!
}

input UserIdInput {
  userId: String!
}

type UsersWithCount {
  count: Int!
  users: [User!]!
}