generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator pothos {
    provider     = "prisma-pothos-types"
    clientOutput = "@prisma/client"
    output       = "../generated/pothos-types.ts"
}

model Like {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    String   @db.ObjectId
    author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId  String   @db.ObjectId
    createdAt DateTime @default(now())

    @@unique([postId, authorId], name: "postId_authorId")
}

model Dislike {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    String   @db.ObjectId
    author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId  String   @db.ObjectId
    createdAt DateTime @default(now())

    @@unique([postId, authorId], name: "postId_authorId")
}

model Flag {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    String   @db.ObjectId
    author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId  String   @db.ObjectId
    createdAt DateTime @default(now())

    @@unique([postId, authorId], name: "postId_authorId")
}

model Post {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    title     String
    content   String?
    examples  String[]
    published Boolean   @default(true)
    author    User?     @relation(fields: [authorId], references: [id])
    authorId  String?   @db.ObjectId
    likes     Like[]
    dislikes  Dislike[]
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
    flagged   Flag[]
    canton    String?
}

model Account {
    id                 String  @id @default(auto()) @map("_id") @db.ObjectId
    userId             String  @map("user_id") @db.ObjectId
    type               String
    provider           String
    providerAccountId  String  @map("provider_account_id")
    refresh_token      String?
    access_token       String?
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String?
    session_state      String?
    oauth_token_secret String?
    oauth_token        String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    sessionToken String   @unique @map("session_token")
    userId       String   @db.ObjectId
    expires      DateTime @map("expiresAt")
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
    USER
    ADMIN
}

model User {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    name          String?
    email         String    @unique
    createdAt     DateTime  @default(now())
    emailVerified DateTime? @map("verifiedAt")
    password      String?
    image         String?
    bio           String?
    posts         Post[]
    Account       Account[]
    sessions      Session[]
    role          Role      @default(USER)
    likes         Like[]
    dislikes      Dislike[]

    country String?
    canton  String?
    flags   Flag[]
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime @map("expiresAt")

    @@unique([identifier, token])
}
