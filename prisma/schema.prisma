generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator pothos {
  provider     = "prisma-pothos-types"
  clientOutput = "@prisma/client"
  output       = "../generated/pothos-types.ts"
}

model Like {
  expression   Expression @relation(fields: [expressionId], references: [id], onDelete: Cascade)
  expressionId String
  author       User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId     String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime?  @updatedAt

  @@id([expressionId, authorId])
  @@unique([expressionId, authorId])
}

model Dislike {
  expression   Expression @relation(fields: [expressionId], references: [id], onDelete: Cascade)
  expressionId String
  author       User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId     String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime?  @updatedAt

  @@id([expressionId, authorId])
  @@unique([expressionId, authorId])
}

model Flag {
  expression   Expression @relation(fields: [expressionId], references: [id], onDelete: Cascade)
  expressionId String
  author       User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId     String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime?  @updatedAt

  @@id([expressionId, authorId])
  @@unique([expressionId, authorId])
}

enum Language {
  DE
  FR
  IT
}

enum ExpressionGender {
  M /// Masculine
  F /// Feminine
  N /// Neutral
}

enum ExpressionType {
  NOUN /// A word that represents a person, place, thing, or idea; e.g., dog, city, happiness
  VERB /// Expresses an action, occurrence, or state of being; e.g., run, exist, happen
  ADJECTIVE /// Describes or modifies a noun or pronoun by providing more information about its qualities or characteristics; e.g., big, happy, green
  ADVERB /// Modifies or describes a verb, adjective, or other adverb, typically indicating manner, time, place, degree, or frequency; e.g., quickly, very, here, often
  PRONOUN /// Acts as a substitute for a noun or noun phrase; e.g., he, she, it, they
  PREPOSITION /// Indicates the relationship between a noun or pronoun and other elements in a sentence, often showing location, time, direction, or manner; e.g., in, on, at, before
  CONJUNCTION /// Connects words, phrases, or clauses within a sentence, indicating a relationship between different parts of the sentence; e.g., and, but, or, because
  INTERJECTION /// Expresses emotion, surprise, or some other sentiment, often standing alone and not grammatically connected to the rest of the sentence; e.g., wow, oh, hey
  PARTICLE /// A word that doesn't fit neatly into traditional grammatical categories and often serves a grammatical or pragmatic function within a sentence, such as phrasal verbs; e.g., up, out, on (as in "turn on", "look up")
}

model Expression {
  id         String              @id @default(cuid())
  title      String
  definition String?
  published  Boolean             @default(false)
  author     User?               @relation(fields: [authorId], references: [id])
  authorId   String?
  likes      Like[]
  dislikes   Dislike[]
  createdAt  DateTime            @default(now())
  updatedAt  DateTime?           @updatedAt
  flagged    Flag[]
  cantons    String[]
  language   Language            @default(DE)
  synonymOf  Synonym[]           @relation("synonymOf") /// the expressions that the parent expression is a synonym of
  synonyms   Synonym[]           @relation("synonym") /// synonyms of the parent expression
  examples   ExpressionExample[]
  gender     ExpressionGender?
  type       ExpressionType?
}

model ExpressionExample {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime?  @updatedAt
  expression   Expression @relation(fields: [expressionId], references: [id], onDelete: Cascade)
  expressionId String
  definition   String
  author       User?      @relation(fields: [authorId], references: [id])
  authorId     String?
  cantons      String[]
}

model Synonym {
  synonymOf   Expression @relation("synonymOf", fields: [synonymOfId], references: [id], onDelete: Cascade) /// the expression that the parent expression is a synonym of
  synonymOfId String
  synonym     Expression @relation("synonym", fields: [synonymId], references: [id], onDelete: Cascade) /// synonym of the parent expression
  synonymId   String

  @@id([synonymId, synonymOfId])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String              @id @default(cuid())
  name          String              @unique @default("")
  email         String              @unique
  createdAt     DateTime            @default(now())
  emailVerified DateTime?
  password      String?
  image         String?
  bio           String?
  expressions   Expression[]
  accounts      Account[]
  sessions      Session[]
  role          Role                @default(USER)
  likes         Like[]
  dislikes      Dislike[]
  country       String?             @default("CH")
  canton        String?
  flags         Flag[]
  examples      ExpressionExample[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
