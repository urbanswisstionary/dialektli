input CreateExpressionExampleInput {
  definition: String!
  expressionId: String!
}

input CreateExpressionInput {
  cantons: [String!]
  definition: String
  example: String
  language: Language
  synonymId: String
  title: String!
}

input CreateUserInput {
  bio: String
  canton: String
  country: String
  email: String!
  image: String
  name: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DeleteExpressionExampleInput {
  exampleId: String!
}

type Dislike {
  author: User!
  authorId: ID!
  createdAt: DateTime!
  expression: Expression!
  expressionId: ID!
}

type Expression {
  author: User!
  cantons: [String!]!
  createdAt: DateTime!
  definition: String
  dislikedByMe: Boolean!
  dislikes: [Dislike!]!
  dislikesCount: Int!
  examples: [ExpressionExample!]!
  flagged: [Flag!]!
  flaggedByMe: Boolean!
  id: ID!
  language: Language!
  likedByMe: Boolean!
  likes: [Like!]!
  likesCount: Int!
  published: Boolean!

  """the expressions that the parent expression is a synonym of"""
  synonymOf: [Synonym!]!

  """synonyms of the parent expression"""
  synonyms: [Synonym!]!
  title: String!
  updatedAt: DateTime
}

input ExpressionActionInput {
  dislike: Boolean
  expressionId: String!
  flag: Boolean
  like: Boolean
}

type ExpressionExample {
  author: User!
  authorId: ID
  cantons: [String!]!
  createdAt: DateTime!
  definition: String!
  expression: Expression!
  expressionId: ID!
  id: ID!
  updatedAt: DateTime
}

input ExpressionIdInput {
  expressionId: String!
}

input ExpressionsQueryInput {
  authorName: String
  canton: String
  firstChar: String
  language: Language
  limit: Int
  offset: Int
  q: String
  slug: String
}

type ExpressionsWithCount {
  count: Int!
  expressions: [Expression!]!
}

type Flag {
  author: User!
  authorId: ID!
  createdAt: DateTime!
  expression: Expression!
  expressionId: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json

enum Language {
  DE
  FR
  IT
}

type Like {
  author: User!
  authorId: ID!
  createdAt: DateTime!
  expression: Expression!
  expressionId: ID!
}

type Mutation {
  changeUserRole(role: Role!, userId: String!): User
  createExpression(data: CreateExpressionInput!): Expression
  createExpressionExample(data: CreateExpressionExampleInput!): ExpressionExample
  createUser(data: CreateUserInput!): User
  deleteExpression(data: ExpressionIdInput!): Expression
  deleteExpressionExample(data: DeleteExpressionExampleInput!): ExpressionExample
  deleteUser(data: UserIdInput!): User
  expressionAction(data: ExpressionActionInput!): Boolean!
  updateExpression(data: UpdateExpressionInput!): Expression
  updateExpressionExample(data: UpdateExpressionExampleInput!): ExpressionExample
  updateUser(data: UpdateUserInput!): User
}

type Query {
  adminExpressions: ExpressionsWithCount
  adminUser(data: UserIdInput!): User!
  adminUsers: UsersWithCount
  expression(data: ExpressionIdInput!): Expression
  expressionsQuery(data: ExpressionsQueryInput!): ExpressionsWithCount
  me: User!
  verifyUserNameIsUnique(name: String!): Boolean!
}

enum Role {
  ADMIN
  USER
}

type Synonym {
  """synonym of the parent expression"""
  synonym: Expression!

  """the expression that the parent expression is a synonym of"""
  synonymOf: Expression!
}

input UpdateExpressionExampleInput {
  definition: String!
  exampleId: String!
}

input UpdateExpressionInput {
  cantons: [String!]
  definition: String
  id: String!
  published: Boolean
  title: String
}

input UpdateUserInput {
  bio: String
  canton: String
  country: String
  id: String!
  image: String
  name: String
}

type User {
  bio: String
  canton: String
  country: String
  dislikes: [Dislike!]!
  dislikesCount: Int!
  email: String!
  emailVerified: DateTime
  expressions: [Expression!]!
  flags: [Flag!]!
  id: ID!
  image: String
  likes: [Like!]!
  likesCount: Int!
  myPublishedExpressionsCount: Int!
  myUnpublishedExpressionsCount: Int!
  name: String!
  role: Role!
}

input UserIdInput {
  userId: String!
}

type UsersWithCount {
  count: Int!
  users: [User!]!
}